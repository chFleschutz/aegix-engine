#version 450

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 1) uniform samplerCube environmentMap;
layout(set = 0, binding = 0, rgba16f) uniform writeonly imageCube prefilteredMap;

layout(push_constant) uniform Prefilter
{
	float roughness;
	float maxMipLevels;
} push;

const uint SAMPLE_COUNT = 4096;
const float PI = 3.14159265359;

vec3 sampleVector(const vec2 uv)
{
    vec3 dir;
    if (gl_GlobalInvocationID.z == 0)      dir = vec3(1.0,  uv.y, -uv.x); 
    else if (gl_GlobalInvocationID.z == 1) dir = vec3(-1.0, uv.y,  uv.x);
    else if (gl_GlobalInvocationID.z == 2) dir = vec3(uv.x, 1.0, -uv.y);
    else if (gl_GlobalInvocationID.z == 3) dir = vec3(uv.x, -1.0, uv.y);
    else if (gl_GlobalInvocationID.z == 4) dir = vec3(uv.x, uv.y, 1.0);
    else if (gl_GlobalInvocationID.z == 5) dir = vec3(-uv.x, uv.y, -1.0);
    return normalize(dir); 
}

// Van der Corput radical inverse function
float radicalInverse(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 hammersley(uint i)
{
    return vec2(float(i) / float(SAMPLE_COUNT), radicalInverse(i));
}  

vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness * roughness;
	
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	
    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
	
    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
	
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}  

void main()
{
	vec2 st = vec2(gl_GlobalInvocationID.xy) / vec2(imageSize(prefilteredMap));
    vec2 uv = vec2(st.x, 1.0 - st.y) * 2.0 - 1.0;

    vec3 N = sampleVector(uv);
    vec3 R = N;
    vec3 V = R;

    float totalWeight = 0.0;
    vec3 prefilteredColor = vec3(0.0);
    for (uint i = 0; i < SAMPLE_COUNT; ++i)
    {
        vec2 Xi = hammersley(i);
        vec3 H = importanceSampleGGX(Xi, N, push.roughness);
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if(NdotL > 0.0)
        {
            prefilteredColor += texture(environmentMap, L).rgb * NdotL;
            totalWeight += NdotL;
        }
    }

    prefilteredColor = prefilteredColor / totalWeight;
    imageStore(prefilteredMap, ivec3(gl_GlobalInvocationID), vec4(prefilteredColor, 1.0));
}
