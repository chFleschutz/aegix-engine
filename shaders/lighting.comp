#version 450

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0, rgba16f) uniform image2D sceneColorMap;
layout(set = 0, binding = 1, rgba16f) uniform image2D positionMap;
layout(set = 0, binding = 2, rgba16f) uniform image2D normalMap;
layout(set = 0, binding = 3, rgba8) uniform image2D albedoMap;
layout(set = 0, binding = 4, rgba8) uniform image2D armMap;
layout(set = 0, binding = 5, rgba8) uniform image2D emissiveMap;

struct AmbientLight
{
	vec4 color;
};

struct DirectionalLight
{
	vec4 direction;
	vec4 color;
};

struct PointLight
{
	vec4 position;
	vec4 color;
};

layout(set = 0, binding = 6) uniform Lighting
{
	vec4 cameraPosition;
	AmbientLight ambientLight;
	DirectionalLight directionalLight;
	PointLight pointLights[32];
	int numPointLights;
} lighting;

const float PI = 3.14159265359;
const float EPSILON = 0.0001;
const float F_DIELECTRIC = 0.04;

const float EMISSIVE_FACTOR = 2.0;

float lightAttenuation(vec3 lightPos, vec3 fragPos);
float normalDistribution(float NdotH, float alpha);
float SchlickGGX(float NdotX, float alpha);
float geometricOcclusion(float NdotV, float NdotL, float alpha);
vec3 specularReflection(float VdotH, vec3 F0);
vec3 PBRLighting(vec3 N, vec3 V, vec3 L, vec3 albedo, float roughness, float metallic, vec3 radiance, vec3 F0);

void main()
{
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

	vec3 position = imageLoad(positionMap, pixelCoords).rgb;
    vec3 normal = imageLoad(normalMap, pixelCoords).rgb;
	vec3 albedo = imageLoad(albedoMap, pixelCoords).rgb;
	vec3 arm = imageLoad(armMap, pixelCoords).rgb;
	vec3 emissive = imageLoad(emissiveMap, pixelCoords).rgb;

    float ambientOcclusion = arm.r;
    float roughness = arm.g;
    float metallic = arm.b;

	vec3 N = normalize(normal);
	vec3 V = normalize(lighting.cameraPosition.xyz - position);
	
    // Tint reflection for metals
    vec3 F0 = mix(vec3(F_DIELECTRIC), albedo, metallic);

    // Emissive material
    vec3 Lo = emissive * EMISSIVE_FACTOR;

    // Ambient light
    {
        vec3 ambientLight = lighting.ambientLight.color.rgb * lighting.ambientLight.color.w;
        Lo += albedo * ambientLight;
    }

    // Directional light
    {
        vec3 L = normalize(-lighting.directionalLight.direction.xyz);
        vec3 radiance = lighting.directionalLight.color.rgb * lighting.directionalLight.color.w;
        Lo += PBRLighting(N, V, L, albedo, roughness, metallic, radiance, F0);
    }

    // Point lights
    for (int i = 0; i < lighting.numPointLights; i++)
    {
        PointLight pointLight = lighting.pointLights[i];
        vec3 L = normalize(pointLight.position.xyz - position);

        float attenuation = lightAttenuation(pointLight.position.xyz, position);
        vec3 radiance = pointLight.color.rgb * pointLight.color.w * attenuation;

        Lo += PBRLighting(N, V, L, albedo, roughness, metallic, radiance, F0);
    }

    imageStore(sceneColorMap, pixelCoords, vec4(Lo, 1.0));
}

float lightAttenuation(vec3 lightPos, vec3 fragPos)
{
	float d = length(lightPos - fragPos);
    return 1.0 / max(d * d, EPSILON);
}

float normalDistribution(float NdotH, float alpha)
{
    // Trowbridge-Reitz GGX
    float a2 = alpha * alpha;
    float denum = NdotH * NdotH * (a2 - 1.0) + 1.0;
    return a2 / max(PI * denum * denum, EPSILON);
}

float SchlickGGX(float NdotX, float alpha)
{
    // Schlick-Beckman GGX
    float k = alpha / 2.0;
    return NdotX / max(NdotX * (1.0 - k) + k, EPSILON);
}

float geometricOcclusion(float NdotV, float NdotL, float alpha)
{
    // Smith Model 
    return SchlickGGX(NdotV, alpha) * SchlickGGX(NdotL, alpha);
}

vec3 specularReflection(float VdotH, vec3 F0)
{
    // Fresnel Schlick approximation
    return F0 + (vec3(1.0) - F0) * pow(1.0 - VdotH, 5.0);
}

vec3 PBRLighting(vec3 N, vec3 V, vec3 L, vec3 albedo, float roughness, float metallic, vec3 radiance, vec3 F0)
{
    vec3 H = normalize(V + L);
    float alpha = roughness * roughness;
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float NdotH = max(dot(N, H), 0.0);
    float VdotH = max(dot(H, V), 0.0);

    float D = normalDistribution(NdotH, roughness);
    float G = geometricOcclusion(NdotV, NdotL, alpha);
    vec3 F = specularReflection(VdotH, F0);

    vec3 kS = F;
    vec3 kD = (1.0 - kS) * (1.0 - metallic);

    // Lambert for diffuse
    vec3 diffuse = kD * albedo / PI;
    // Cook-Torrance for specular
    vec3 specular = D * G * F / max(4.0 * NdotV * NdotL, EPSILON);

    return (diffuse + specular) * radiance * NdotL;
}
