#version 450

layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform samplerCube environmentMap;
layout(set = 0, binding = 1, rgba16f) uniform writeonly imageCube irradianceMap;

const float PI = 3.14159265359;
const float EPSILON = 0.0001;

const uint SAMPLE_COUNT = 16 * 1024;
const float INV_SAMPLE_COUNT = 1.0 / float(SAMPLE_COUNT);

vec3 sampleVector(const vec2 uv)
{
    vec3 dir;
    if (gl_GlobalInvocationID.z == 0)      dir = vec3(1.0,  uv.y, -uv.x); 
    else if (gl_GlobalInvocationID.z == 1) dir = vec3(-1.0, uv.y,  uv.x);
    else if (gl_GlobalInvocationID.z == 2) dir = vec3(uv.x, 1.0, -uv.y);
    else if (gl_GlobalInvocationID.z == 3) dir = vec3(uv.x, -1.0, uv.y);
    else if (gl_GlobalInvocationID.z == 4) dir = vec3(uv.x, uv.y, 1.0);
    else if (gl_GlobalInvocationID.z == 5) dir = vec3(-uv.x, uv.y, -1.0);
    return normalize(dir); 
}

void computeBasisVectors(const vec3 N, out vec3 S, out vec3 T)
{
    // Branchless non-degenerate tangent
    T = cross(N, vec3(0.0, 1.0, 0.0));
    T = mix(cross(N, vec3(1.0, 0.0, 0.0)), T, step(EPSILON, dot(T, T)));
    T = normalize(T);
    S = cross(N, T);
}

// Van der Corput radical inverse function
float radicalInverse(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return float(bits) * 2.3283064365386963e-10; 
}

// Sample i-th point on the Hammersley sequence
vec2 hammersley(uint i)
{
    return vec2(i * INV_SAMPLE_COUNT, radicalInverse(i));
}

vec3 sampleHemisphere(vec2 x)
{
    // Cosine weighted importance sampling
    float phi = 2.0 * PI * x.y;
    float cosTheta = x.x;
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    return vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
}

vec3 hemisphereToWorld(const vec3 v, const vec3 N, const vec3 S, const vec3 T)
{
    return v.x * S + v.y * T + v.z * N;
}

void main()
{
    vec2 size = vec2(imageSize(irradianceMap));
	vec2 st = vec2(gl_GlobalInvocationID.xy) / size;
    vec2 uv = vec2(st.x, 1.0 - st.y) * 2.0 - 1.0;

    vec3 N = sampleVector(uv);
    vec3 S, T;
    computeBasisVectors(N, S, T);

    vec3 irradiance = vec3(0.0);
    for (uint i = 0; i < SAMPLE_COUNT; ++i)
    {
        vec2 pos = hammersley(i);
        vec3 L = hemisphereToWorld(sampleHemisphere(pos), N, S, T);
        float NdotL = max(dot(N, L), 0.0);
        
        irradiance += 2.0 * texture(environmentMap, L).rgb * NdotL;
    }

    irradiance /= vec3(SAMPLE_COUNT);
    imageStore(irradianceMap, ivec3(gl_GlobalInvocationID), vec4(irradiance, 1.0));
}
