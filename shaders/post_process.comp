#version 450

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, rgba16f) uniform image2D outFinalMap;
layout(binding = 1, rgba16f) uniform image2D sceneColorMap;
layout(binding = 2, rgba16f) uniform image2D bloomMap;

layout(push_constant) uniform PostProcess
{
	int toneMappingMode;
	float bloomIntensity;
} push;

vec3 ToneMapReinhard(vec3 color);
vec3 ToneMapACES(vec3 color);
vec3 applyToneMapping(vec3 color);
vec3 applyGammaCorrection(vec3 color);

void main()
{
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

	vec3 sceneColor = imageLoad(sceneColorMap, pixelCoords).rgb;
	vec3 bloomColor = imageLoad(bloomMap, pixelCoords).rgb;

	vec3 color = sceneColor + (push.bloomIntensity * bloomColor);
	color = applyToneMapping(color);
	color = applyGammaCorrection(color);
	imageStore(outFinalMap, pixelCoords, vec4(color, 1.0));
}

vec3 ToneMapReinhard(vec3 color)
{
	return color / (color + vec3(1.0));
}

vec3 ToneMapACES(vec3 color)
{
	const float A = 2.51;
	const float B = 0.03;
	const float C = 2.43;
	const float D = 0.59;
	const float E = 0.14;
	return clamp((color * (A * color + B)) / (color * (C * color + D) + E), 0.0, 1.0);
}

vec3 applyToneMapping(vec3 color)
{
	switch (push.toneMappingMode)
	{
	case 0:
		return ToneMapReinhard(color);
	case 1:
		return ToneMapACES(color);
	default:
		return color;
	}
}

vec3 applyGammaCorrection(vec3 color)
{
	return pow(color, vec3(1.0 / 2.2));
}
