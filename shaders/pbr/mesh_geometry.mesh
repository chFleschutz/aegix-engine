#version 460
#extension GL_EXT_mesh_shader : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types : require

layout(local_size_x = 32) in;
layout(triangles, max_vertices = 64, max_primitives = 126) out;

struct Vertex
{
    vec3 position;
    vec3 normal;
    vec2 uv;
    vec3 color;
};

struct Meshlet
{
	vec3 center;
	float radius;
	int8_t coneAxis[3];
	int8_t coneCutoff;
	uint vertexOffset;
	uint primitiveOffset;
	uint8_t vertexCount;
	uint8_t primitiveCount;
};

layout(push_constant, std140) uniform Push 
{
    mat4 model; 
    mat4 normal;
} push;

layout(set = 0, binding = 0, std140) uniform Global
{
    mat4 projection;
    mat4 view;
    mat4 inverseView;
} global;

layout(set = 2, binding = 0, std430) readonly buffer Meshlets { Meshlet meshlets[]; };
layout(set = 3, binding = 0, std430) readonly buffer VertexIndices { uint vertexIndices[]; };
layout(set = 3, binding = 1, scalar) readonly buffer PrimitiveIndices { uint8_t primitiveIndices[]; };
layout(set = 3, binding = 2, scalar) readonly buffer Vertices { Vertex vertices[]; };

layout(location = 0) out vec3 outWorldPosition[];
layout(location = 1) out vec3 outWorldNormal[];
layout(location = 2) out vec2 outUV[];

void main()
{
    Meshlet meshlet = meshlets[gl_WorkGroupID.x];
    SetMeshOutputsEXT(meshlet.vertexCount, meshlet.primitiveCount);

    for (uint i = gl_LocalInvocationIndex; i < uint(meshlet.vertexCount); i += gl_WorkGroupSize.x)
    {
        uint index = vertexIndices[meshlet.vertexOffset + i];
        Vertex v = vertices[index];

        vec4 worldPosition = push.model * vec4(v.position, 1.0);
        gl_MeshVerticesEXT[i].gl_Position = global.projection * global.view * worldPosition;
        outWorldPosition[i] = worldPosition.xyz;
        outWorldNormal[i] = normalize(mat3(push.normal) * v.normal);
        outUV[i] = v.uv;
    }

    for (uint i = gl_LocalInvocationIndex; i < uint(meshlet.primitiveCount); i += gl_WorkGroupSize.x)
    {
        uint offset = meshlet.primitiveOffset + i * 3;
        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(
            primitiveIndices[offset + 0], 
            primitiveIndices[offset + 1], 
            primitiveIndices[offset + 2]);
    }
}
